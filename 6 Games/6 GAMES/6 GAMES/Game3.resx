<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>